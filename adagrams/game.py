from random import randint, choice

LETTERS = {
    "A" : 9,
    "B" : 2,
    "C" : 2,
    "D" : 4,
    "E" : 12,	
    "F" : 2,
    "G" : 3,
    "H" : 2,
    "I" : 9,
    "J" : 1,
    "K" : 1,
    "L" : 4,
    "M" : 2,
    "N" : 6,
    "O" : 8,
    "P" : 2,
    "Q" : 1,
    "R" : 6,
    "S" : 4,
    "T" : 6,
    "U" : 4,
    "V" : 2,
    "W" : 2,
    "X" : 1,
    "Y" : 2,
    "Z" : 1
}

LETTER_SCORES = {
    1: ["A", "E", "I", "O", "U", "L", "N", "R", "S", "T"],
    2: ["D", "G"],
    3: ["B", "C", "M", "P"],
    4: ["F", "H", "V", "W", "Y"],
    5: ["K"],
    8: ["J", "X"],
    10: ["Q", "Z"],
}

def return_letter(letter_dict):
    """ 
    (helper function)
    Returns a random letter, taking into account 
    the frequency of letters in letter_dict
    
    args:
        letter_dict - a new dictionary of letters
    """
    # chr (character), links a number to an ascii character, since
    # we're only using capital letters, the range is 65-90
    letter = chr(randint(65,90))

    if letter_dict[letter] > 0:
        letter_dict[letter] -= 1
        return letter
    else:
        # Recursion, calling this function on itself, basically
        # saying if I don't find a letter here, run it again
        return return_letter(letter_dict)

def draw_letters():
    """
    Returns a list of 10 random letters generated by
    return_letter
    """
    # Copying the dict so it doesn't run off the same one each time
    # deep copy via dict comprehension, like a for loop but shorter
    # probably didn't need a deep copy, but want to be safe
    letter_dict = {letter : value for letter, value in LETTERS.items()}

    # Using helper function & list comprehension
    new_letters = [return_letter(letter_dict) for _ in range(10)]

    """Below is an alternative way using methods we've learned so far"""
    # letter_dict = LETTERS.copy()
    # new_letters = []
    # letter_choices = list(LETTERS.keys())
    
    # while len(new_letters) < 10:
    #     letter = choice(letter_choices)
        
    #     if letter_dict[letter] != 0:
    #         new_letters.append(letter)
    #         letter_dict[letter] -= 1
    #     else:
    #         continue
    # return new_letters
    
    return new_letters

def uses_available_letters(word, letter_bank):
    """
    Returns a boolean based on whether the letter_bank
    has the letters to make the word

    args:
        word - a word to search 
        letter_bank - a list of 10 letters
    """
    # List comprehension, like a for loop, but shorter
    letter_list = [letter.lower() for letter in letter_bank]
    """Below is an alternative way using methods we've learned so far"""
    # letter_list = []

    # for letter in letter_bank:
    #     letter_list.append(letter.lower())

    for letter in word.lower():
        if letter in letter_list:
            letter_index = letter_list.index(letter)
            #pop only removes one, instead of all (remove)
            letter_list.pop(letter_index)
        else:
            return False
    return True

def score_word(word):
    """
    Returns a score of a word

    args:
        word - a word to score
    """
    # Ternary statement, like an if statement but shorter
    total_score = 0 if len(word) < 7 else 8
    """Below is an alternative way using methods we've learned so far"""
    # if len(word) < 7:
    #     total_score = 0
    # else:
    #     total_score = 8
    
    for letter in word.upper():
        for score, letters in LETTER_SCORES.items():
            if letter in letters:
                total_score += score

    return total_score

def get_highest_word_score(word_list):
    """
    Returns the word with the highest score

    args:
        word_list - a list of guessed words to score
    """
    # Dictionary comprehension, like a for loop but shorter
    score_dict = {word : score_word(word) for word in word_list}
    """Below is an alternative way using methods we've learned so far"""
    # score_dict = {}
    
    # for word in word_list:
    #     score_dict[word] = score_word(word)

    highest_score = 0
    highest = ()

    for word, score in score_dict.items():
        if score > highest_score:
            highest = (word, score)
            highest_score = score
        elif score == highest_score:
            if len(word) == 10 and len(highest[0]) != 10:
                highest = (word, score)
            elif len(word) < len(highest[0]) and len(highest[0]) != 10:
                highest = (word, score)

    return highest